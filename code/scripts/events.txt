event TransferError(address dest, bytes error);
event LastResortAddressNotSet();
event RecoveryAddressUpdated(address dest);
event PaymentReceived(uint256 amount, address from);
event PaymentSent(uint256 amount, address dest);
event PaymentForwarded(uint256 amount, address dest);
event AutoRecoveryTriggered(address from);
event AutoRecoveryTriggeredPrematurely(address from, uint256 requiredTime);
event RecoveryFailure();
event RecoveryTriggered();
event Retired();
event ForwardAddressUpdated(address dest);
event ForwardAddressAlreadySet(address dest);
event ForwardAddressInvalid(address dest);
event BackLinkUpdated(address dest, address backlink);
event BackLinkUpdateError(address dest, address backlink, string error);
event ExternalCallCompleted(address contractAddress, uint256 amount, bytes data, bytes ret);
event ExternalCallFailed(address contractAddress, uint256 amount, bytes data, bytes ret);
event BackLinkAltered(address[] added, address[] removed);
event InvalidBackLinkIndex(uint256 index);
event CommandDispatched(address backlink, bytes commandData);
event CommandFailed(address backlink, string reason, bytes commandData);
event DomainRegistered(address subdomainRegistrar, string subdomain, bytes32 domainLabel);
event ReverseDomainClaimed(address reverseRegistrar, bytes32 nodeHash);
event ReverseDomainClaimError(string reason);
event InvalidFQDN(string fqdn, uint32 subdomainLabelLength);
event DomainRegistrationFailed(string reason);
event AttemptRegistration(bytes32 node, string subdomain, address owner, uint256 duration, string url, address resolver);
event DomainTransferFailed(string reason);
event AttemptRenewal(bytes32 node, string subdomain, uint256 duration);
event DomainRenewalFailed(string reason);
event DomainTransferred(bytes32 subnode, address dest);
event DomainRenewed(bytes32 node, string subdomain, uint256 duration);
event SignatureMismatch(bytes32 hash, bytes32 newSignature, bytes32 existingSignature);
event SignatureNotExist(bytes32 hash);
event SignatureAlreadyExist(bytes32 hash, bytes32 signature);
event SignatureAuthorized(bytes32 hash, bytes32 signature);
event SignatureRevoked(bytes32 hash, bytes32 signature);
event SignatureExpired(bytes32 hash, bytes32 signature);
event ExceedSpendingLimit(uint256 amount, uint256 limit, uint256 current, uint256 spendingInterval, address dest);
event InsufficientFund(uint256 amount, uint256 balance, address dest);
event ReceivedToken(uint8 tokenType, uint256 amount, address from, address tokenContract, address operator, uint256 tokenId, bytes data);
event ForwardedToken(uint8 tokenType, uint256 amount, address from, address tokenContract, address operator, uint256 tokenId, bytes data);
event TokenTransferFailed(uint8 tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount);
event TokenTransferError(uint8 tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount, string reason);
event TokenTransferSucceeded(uint8 tokenType, address contractAddress, uint256 tokenId, address dest, uint256 amount);
event TokenRecovered(uint8 tokenType, address contractAddress, uint256 tokenId, uint256 balance);
event BalanceRetrievalError(uint8 tokenType, address contractAddress, uint256 tokenId, string reason);
event TokenTracked(uint8 tokenType, address contractAddress, uint256 tokenId);
event TokenUntracked(uint8 tokenType, address contractAddress, uint256 tokenId);
event TokenNotFound(uint8 tokenType, address contractAddress, uint256 tokenId);
event CoreDisplaced(tuple(bytes32,uint8,uint8,uint32,uint32,uint8) oldCore, tuple(bytes32,uint8,uint8,uint32,uint32,uint8) newCore, tuple(bytes32,uint8,uint8,uint32,uint32,uint8)[] newInnerCores);
event CoreDisplacementFailed(tuple(bytes32,uint8,uint8,uint32,uint32,uint8) newCore, tuple(bytes32,uint8,uint8,uint32,uint32,uint8)[] newInnerCores, string reason);
event ONEWalletDeployFailed(uint256 salt, bytes32 codeHash);
event ONEWalletDeploySuccess(address addr, uint256 salt, bytes32 codeHash);
event SpendingLimitChanged(uint256 newLimit);
event HighestSpendingLimitChanged(uint256 newLimit);
event SpendingLimitChangeFailed(uint256 newLimit, string reason);
event SpendingLimitJumped(uint256 newLimit);
event StakingSuccess(uint8 action, address validatorAddress, uint256 amount, uint256 result);
event StakingFailure(uint8 action, address validatorAddress, uint256 amount, uint256 result);
precompile_event Harmony/CollectRewards (uint256 amount);
